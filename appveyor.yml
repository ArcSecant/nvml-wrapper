# Based on the "trust" template v0.1.1
# https://github.com/japaric/trust/tree/v0.1.1

environment:
  global:
    # TODO This is the Rust channel that build jobs will use by default but can be
    # overridden on a case by case basis down below
    RUST_VERSION: stable

    # TODO Update this to match the name of your project.
    CRATE_NAME: nvml-wrapper

  # TODO These are all the build jobs. Adjust as necessary. Comment out what you
  # don't need
  matrix:
    # MinGW
    - TARGET: i686-pc-windows-gnu
    - TARGET: x86_64-pc-windows-gnu

    # MSVC
    - TARGET: i686-pc-windows-msvc
    - TARGET: x86_64-pc-windows-msvc

    # Testing other channels
    - TARGET: x86_64-pc-windows-gnu
      RUST_VERSION: nightly
    - TARGET: x86_64-pc-windows-msvc
      RUST_VERSION: nightly

install:
  - ps: >-
      If ($Env:TARGET -eq 'x86_64-pc-windows-gnu') {
        $Env:PATH += ';C:\msys64\mingw64\bin'
      } ElseIf ($Env:TARGET -eq 'i686-pc-windows-gnu') {
        $Env:PATH += ';C:\msys64\mingw32\bin'
      }
  - curl -sSf -o rustup-init.exe https://win.rustup.rs/
  - rustup-init.exe -y --default-host %TARGET% --default-toolchain %RUST_VERSION%
  - set PATH=%PATH%;C:\Users\appveyor\.cargo\bin
  - rustc -Vv
  - cargo -V

# TODO This is the "test phase", tweak it as you see fit
test_script:
  - if ($Env:RUST_VERSION -eq 'nightly') (
      cargo build --target %TARGET% --features "nightly ci" &&
      cargo build --target %TARGET% --release --features "nightly ci" &&
      cargo build --target %TARGET% --features "nightly ci serde" &&
      cargo build --target %TARGET% --release --features "nightly ci serde" &&
      cargo test --target %TARGET% --features "test-local ci nightly" --no-run &&
      cargo test --target %TARGET% --release --features "test-local ci nightly" --no-run &&
      cargo test --target %TARGET% --features "nightly ci" --no-run &&
      cargo test --target %TARGET% --release --features "nightly ci" --no-run
    ) else (
      cargo build --target %TARGET% --features "ci" &&
      cargo build --target %TARGET% --release --features "ci" &&
      cargo build --target %TARGET% --features "serde ci" &&
      cargo build --target %TARGET% --release --features "serde ci" &&
      cargo test --target %TARGET% --features "test-local ci" --no-run &&
      cargo test --target %TARGET% --release --features "test-local ci" --no-run &&
      cargo test --target %TARGET% --no-run --features "ci" &&
      cargo test --target %TARGET% --release --features "ci" --no-run
    )

cache:
  - C:\Users\appveyor\.cargo\registry
  - target

branches:
  only:
    - /.*/

notifications:
  - provider: Email
    on_build_success: false

# Building is done in the test phase, so we disable Appveyor's build phase.
build: false
